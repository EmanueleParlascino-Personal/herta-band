"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "./pages/Components/Banner.tsx":
/*!*************************************!*\
  !*** ./pages/Components/Banner.tsx ***!
  \*************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _lib_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../lib/client */ \"./lib/client.js\");\n/* harmony import */ var _Styles_banner_module_css__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../Styles/banner.module.css */ \"./pages/Styles/banner.module.css\");\n/* harmony import */ var _Styles_banner_module_css__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_Styles_banner_module_css__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var nuka_carousel__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! nuka-carousel */ \"./node_modules/nuka-carousel/dist/index.mjs\");\n\n\n\n\n\nconst Banner = (param)=>{\n    let { banners } = param;\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(nuka_carousel__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n            children: [\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"img\", {\n                            src: (0,_lib_client__WEBPACK_IMPORTED_MODULE_2__.urlFor)(banners[0].image),\n                            className: \"banner-image\"\n                        }, void 0, false, {\n                            fileName: \"D:\\\\Projects\\\\herta-band\\\\pages\\\\Components\\\\Banner.tsx\",\n                            lineNumber: 11,\n                            columnNumber: 9\n                        }, undefined),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: (_Styles_banner_module_css__WEBPACK_IMPORTED_MODULE_4___default().textContainer),\n                            children: [\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h1\", {\n                                    className: (_Styles_banner_module_css__WEBPACK_IMPORTED_MODULE_4___default().title),\n                                    children: banners[0].product\n                                }, void 0, false, {\n                                    fileName: \"D:\\\\Projects\\\\herta-band\\\\pages\\\\Components\\\\Banner.tsx\",\n                                    lineNumber: 13,\n                                    columnNumber: 13\n                                }, undefined),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h3\", {\n                                    className: (_Styles_banner_module_css__WEBPACK_IMPORTED_MODULE_4___default().subtitle),\n                                    children: banners[0].smallText\n                                }, void 0, false, {\n                                    fileName: \"D:\\\\Projects\\\\herta-band\\\\pages\\\\Components\\\\Banner.tsx\",\n                                    lineNumber: 14,\n                                    columnNumber: 13\n                                }, undefined)\n                            ]\n                        }, void 0, true, {\n                            fileName: \"D:\\\\Projects\\\\herta-band\\\\pages\\\\Components\\\\Banner.tsx\",\n                            lineNumber: 12,\n                            columnNumber: 9\n                        }, undefined)\n                    ]\n                }, void 0, true, {\n                    fileName: \"D:\\\\Projects\\\\herta-band\\\\pages\\\\Components\\\\Banner.tsx\",\n                    lineNumber: 10,\n                    columnNumber: 7\n                }, undefined),\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"img\", {\n                            src: (0,_lib_client__WEBPACK_IMPORTED_MODULE_2__.urlFor)(banners[0].image),\n                            className: \"banner-image\"\n                        }, void 0, false, {\n                            fileName: \"D:\\\\Projects\\\\herta-band\\\\pages\\\\Components\\\\Banner.tsx\",\n                            lineNumber: 18,\n                            columnNumber: 9\n                        }, undefined),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: (_Styles_banner_module_css__WEBPACK_IMPORTED_MODULE_4___default().textContainer),\n                            children: [\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h1\", {\n                                    className: (_Styles_banner_module_css__WEBPACK_IMPORTED_MODULE_4___default().title),\n                                    children: banners[0].product\n                                }, void 0, false, {\n                                    fileName: \"D:\\\\Projects\\\\herta-band\\\\pages\\\\Components\\\\Banner.tsx\",\n                                    lineNumber: 20,\n                                    columnNumber: 13\n                                }, undefined),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h3\", {\n                                    className: (_Styles_banner_module_css__WEBPACK_IMPORTED_MODULE_4___default().subtitle),\n                                    children: banners[0].smallText\n                                }, void 0, false, {\n                                    fileName: \"D:\\\\Projects\\\\herta-band\\\\pages\\\\Components\\\\Banner.tsx\",\n                                    lineNumber: 21,\n                                    columnNumber: 13\n                                }, undefined)\n                            ]\n                        }, void 0, true, {\n                            fileName: \"D:\\\\Projects\\\\herta-band\\\\pages\\\\Components\\\\Banner.tsx\",\n                            lineNumber: 19,\n                            columnNumber: 9\n                        }, undefined)\n                    ]\n                }, void 0, true, {\n                    fileName: \"D:\\\\Projects\\\\herta-band\\\\pages\\\\Components\\\\Banner.tsx\",\n                    lineNumber: 17,\n                    columnNumber: 7\n                }, undefined)\n            ]\n        }, void 0, true, {\n            fileName: \"D:\\\\Projects\\\\herta-band\\\\pages\\\\Components\\\\Banner.tsx\",\n            lineNumber: 9,\n            columnNumber: 5\n        }, undefined)\n    }, void 0, false, {\n        fileName: \"D:\\\\Projects\\\\herta-band\\\\pages\\\\Components\\\\Banner.tsx\",\n        lineNumber: 8,\n        columnNumber: 5\n    }, undefined);\n};\n_c = Banner;\n/* harmony default export */ __webpack_exports__[\"default\"] = (Banner);\nvar _c;\n$RefreshReg$(_c, \"Banner\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9wYWdlcy9Db21wb25lbnRzL0Jhbm5lci50c3giLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUF5QjtBQUNnQjtBQUNPO0FBQ1o7QUFFcEMsTUFBTUksU0FBUztRQUFDLEVBQUNDLE9BQU8sRUFBQztJQUN2QixxQkFDRSw4REFBQ0M7a0JBQ0QsNEVBQUNILHFEQUFRQTs7OEJBQ1AsOERBQUNHOztzQ0FDQyw4REFBQ0M7NEJBQUlDLEtBQU1QLG1EQUFNQSxDQUFDSSxPQUFPLENBQUMsRUFBRSxDQUFDSSxLQUFLOzRCQUFHQyxXQUFVOzs7Ozs7c0NBQy9DLDhEQUFDSjs0QkFBSUksV0FBV1IsZ0ZBQW9COzs4Q0FDaEMsOERBQUNVO29DQUFHRixXQUFXUix3RUFBWTs4Q0FBR0csT0FBTyxDQUFDLEVBQUUsQ0FBQ1MsT0FBTzs7Ozs7OzhDQUNoRCw4REFBQ0M7b0NBQUdMLFdBQVdSLDJFQUFlOzhDQUFHRyxPQUFPLENBQUMsRUFBRSxDQUFDWSxTQUFTOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OEJBRzNELDhEQUFDWDs7c0NBQ0MsOERBQUNDOzRCQUFJQyxLQUFNUCxtREFBTUEsQ0FBQ0ksT0FBTyxDQUFDLEVBQUUsQ0FBQ0ksS0FBSzs0QkFBR0MsV0FBVTs7Ozs7O3NDQUMvQyw4REFBQ0o7NEJBQUlJLFdBQVdSLGdGQUFvQjs7OENBQ2hDLDhEQUFDVTtvQ0FBR0YsV0FBV1Isd0VBQVk7OENBQUdHLE9BQU8sQ0FBQyxFQUFFLENBQUNTLE9BQU87Ozs7Ozs4Q0FDaEQsOERBQUNDO29DQUFHTCxXQUFXUiwyRUFBZTs4Q0FBR0csT0FBTyxDQUFDLEVBQUUsQ0FBQ1ksU0FBUzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFPakU7S0F0Qk1iO0FBd0JOLCtEQUFlQSxNQUFNQSxFQUFBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL3BhZ2VzL0NvbXBvbmVudHMvQmFubmVyLnRzeD8yYmMxIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcclxuaW1wb3J0IHsgdXJsRm9yIH0gZnJvbSAnLi4vLi4vbGliL2NsaWVudCdcclxuaW1wb3J0IHN0eWxlcyBmcm9tIFwiLi4vU3R5bGVzL2Jhbm5lci5tb2R1bGUuY3NzXCJcclxuaW1wb3J0IENhcm91c2VsIGZyb20gXCJudWthLWNhcm91c2VsXCJcclxuXHJcbmNvbnN0IEJhbm5lciA9ICh7YmFubmVyc30pID0+IHtcclxuICByZXR1cm4gKFxyXG4gICAgPGRpdj5cclxuICAgIDxDYXJvdXNlbD5cclxuICAgICAgPGRpdj5cclxuICAgICAgICA8aW1nIHNyYyA9e3VybEZvcihiYW5uZXJzWzBdLmltYWdlKX0gY2xhc3NOYW1lPSdiYW5uZXItaW1hZ2UnLz5cclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzLnRleHRDb250YWluZXJ9PlxyXG4gICAgICAgICAgICA8aDEgY2xhc3NOYW1lPXtzdHlsZXMudGl0bGV9PntiYW5uZXJzWzBdLnByb2R1Y3R9PC9oMT5cclxuICAgICAgICAgICAgPGgzIGNsYXNzTmFtZT17c3R5bGVzLnN1YnRpdGxlfT57YmFubmVyc1swXS5zbWFsbFRleHR9PC9oMz5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgPC9kaXY+XHJcbiAgICAgIDxkaXY+XHJcbiAgICAgICAgPGltZyBzcmMgPXt1cmxGb3IoYmFubmVyc1swXS5pbWFnZSl9IGNsYXNzTmFtZT0nYmFubmVyLWltYWdlJy8+XHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlcy50ZXh0Q29udGFpbmVyfT5cclxuICAgICAgICAgICAgPGgxIGNsYXNzTmFtZT17c3R5bGVzLnRpdGxlfT57YmFubmVyc1swXS5wcm9kdWN0fTwvaDE+XHJcbiAgICAgICAgICAgIDxoMyBjbGFzc05hbWU9e3N0eWxlcy5zdWJ0aXRsZX0+e2Jhbm5lcnNbMF0uc21hbGxUZXh0fTwvaDM+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgPC9DYXJvdXNlbD5cclxuICAgICAgXHJcbiAgICA8L2Rpdj5cclxuICApXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IEJhbm5lclxyXG4iXSwibmFtZXMiOlsiUmVhY3QiLCJ1cmxGb3IiLCJzdHlsZXMiLCJDYXJvdXNlbCIsIkJhbm5lciIsImJhbm5lcnMiLCJkaXYiLCJpbWciLCJzcmMiLCJpbWFnZSIsImNsYXNzTmFtZSIsInRleHRDb250YWluZXIiLCJoMSIsInRpdGxlIiwicHJvZHVjdCIsImgzIiwic3VidGl0bGUiLCJzbWFsbFRleHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./pages/Components/Banner.tsx\n"));

/***/ }),

/***/ "./node_modules/react/cjs/react-jsx-runtime.development.js":
/*!*****************************************************************!*\
  !*** ./node_modules/react/cjs/react-jsx-runtime.development.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval(__webpack_require__.ts("/**\n * @license React\n * react-jsx-runtime.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n\nif (true) {\n  (function() {\n'use strict';\n\nvar React = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n\n// ATTENTION\n// When adding new symbols to this file,\n// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\n// The Symbol used to tag the ReactElement-like types.\nvar REACT_ELEMENT_TYPE = Symbol.for('react.element');\nvar REACT_PORTAL_TYPE = Symbol.for('react.portal');\nvar REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');\nvar REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');\nvar REACT_PROFILER_TYPE = Symbol.for('react.profiler');\nvar REACT_PROVIDER_TYPE = Symbol.for('react.provider');\nvar REACT_CONTEXT_TYPE = Symbol.for('react.context');\nvar REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');\nvar REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');\nvar REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');\nvar REACT_MEMO_TYPE = Symbol.for('react.memo');\nvar REACT_LAZY_TYPE = Symbol.for('react.lazy');\nvar REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');\nvar MAYBE_ITERATOR_SYMBOL = Symbol.iterator;\nvar FAUX_ITERATOR_SYMBOL = '@@iterator';\nfunction getIteratorFn(maybeIterable) {\n  if (maybeIterable === null || typeof maybeIterable !== 'object') {\n    return null;\n  }\n\n  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];\n\n  if (typeof maybeIterator === 'function') {\n    return maybeIterator;\n  }\n\n  return null;\n}\n\nvar ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n\nfunction error(format) {\n  {\n    {\n      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        args[_key2 - 1] = arguments[_key2];\n      }\n\n      printWarning('error', format, args);\n    }\n  }\n}\n\nfunction printWarning(level, format, args) {\n  // When changing this logic, you might want to also\n  // update consoleWithStackDev.www.js as well.\n  {\n    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n    var stack = ReactDebugCurrentFrame.getStackAddendum();\n\n    if (stack !== '') {\n      format += '%s';\n      args = args.concat([stack]);\n    } // eslint-disable-next-line react-internal/safe-string-coercion\n\n\n    var argsWithFormat = args.map(function (item) {\n      return String(item);\n    }); // Careful: RN currently depends on this prefix\n\n    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it\n    // breaks IE9: https://github.com/facebook/react/issues/13610\n    // eslint-disable-next-line react-internal/no-production-logging\n\n    Function.prototype.apply.call(console[level], console, argsWithFormat);\n  }\n}\n\n// -----------------------------------------------------------------------------\n\nvar enableScopeAPI = false; // Experimental Create Event Handle API.\nvar enableCacheElement = false;\nvar enableTransitionTracing = false; // No known bugs, but needs performance testing\n\nvar enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber\n// stuff. Intended to enable React core members to more easily debug scheduling\n// issues in DEV builds.\n\nvar enableDebugTracing = false; // Track which Fiber(s) schedule render work.\n\nvar REACT_MODULE_REFERENCE;\n\n{\n  REACT_MODULE_REFERENCE = Symbol.for('react.module.reference');\n}\n\nfunction isValidElementType(type) {\n  if (typeof type === 'string' || typeof type === 'function') {\n    return true;\n  } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).\n\n\n  if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing  || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden  || type === REACT_OFFSCREEN_TYPE || enableScopeAPI  || enableCacheElement  || enableTransitionTracing ) {\n    return true;\n  }\n\n  if (typeof type === 'object' && type !== null) {\n    if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object\n    // types supported by any Flight configuration anywhere since\n    // we don't know which Flight build this will end up being used\n    // with.\n    type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== undefined) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction getWrappedName(outerType, innerType, wrapperName) {\n  var displayName = outerType.displayName;\n\n  if (displayName) {\n    return displayName;\n  }\n\n  var functionName = innerType.displayName || innerType.name || '';\n  return functionName !== '' ? wrapperName + \"(\" + functionName + \")\" : wrapperName;\n} // Keep in sync with react-reconciler/getComponentNameFromFiber\n\n\nfunction getContextName(type) {\n  return type.displayName || 'Context';\n} // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.\n\n\nfunction getComponentNameFromType(type) {\n  if (type == null) {\n    // Host root, text node or just invalid type.\n    return null;\n  }\n\n  {\n    if (typeof type.tag === 'number') {\n      error('Received an unexpected object in getComponentNameFromType(). ' + 'This is likely a bug in React. Please file an issue.');\n    }\n  }\n\n  if (typeof type === 'function') {\n    return type.displayName || type.name || null;\n  }\n\n  if (typeof type === 'string') {\n    return type;\n  }\n\n  switch (type) {\n    case REACT_FRAGMENT_TYPE:\n      return 'Fragment';\n\n    case REACT_PORTAL_TYPE:\n      return 'Portal';\n\n    case REACT_PROFILER_TYPE:\n      return 'Profiler';\n\n    case REACT_STRICT_MODE_TYPE:\n      return 'StrictMode';\n\n    case REACT_SUSPENSE_TYPE:\n      return 'Suspense';\n\n    case REACT_SUSPENSE_LIST_TYPE:\n      return 'SuspenseList';\n\n  }\n\n  if (typeof type === 'object') {\n    switch (type.$$typeof) {\n      case REACT_CONTEXT_TYPE:\n        var context = type;\n        return getContextName(context) + '.Consumer';\n\n      case REACT_PROVIDER_TYPE:\n        var provider = type;\n        return getContextName(provider._context) + '.Provider';\n\n      case REACT_FORWARD_REF_TYPE:\n        return getWrappedName(type, type.render, 'ForwardRef');\n\n      case REACT_MEMO_TYPE:\n        var outerName = type.displayName || null;\n\n        if (outerName !== null) {\n          return outerName;\n        }\n\n        return getComponentNameFromType(type.type) || 'Memo';\n\n      case REACT_LAZY_TYPE:\n        {\n          var lazyComponent = type;\n          var payload = lazyComponent._payload;\n          var init = lazyComponent._init;\n\n          try {\n            return getComponentNameFromType(init(payload));\n          } catch (x) {\n            return null;\n          }\n        }\n\n      // eslint-disable-next-line no-fallthrough\n    }\n  }\n\n  return null;\n}\n\nvar assign = Object.assign;\n\n// Helpers to patch console.logs to avoid logging during side-effect free\n// replaying on render function. This currently only patches the object\n// lazily which won't cover if the log function was extracted eagerly.\n// We could also eagerly patch the method.\nvar disabledDepth = 0;\nvar prevLog;\nvar prevInfo;\nvar prevWarn;\nvar prevError;\nvar prevGroup;\nvar prevGroupCollapsed;\nvar prevGroupEnd;\n\nfunction disabledLog() {}\n\ndisabledLog.__reactDisabledLog = true;\nfunction disableLogs() {\n  {\n    if (disabledDepth === 0) {\n      /* eslint-disable react-internal/no-production-logging */\n      prevLog = console.log;\n      prevInfo = console.info;\n      prevWarn = console.warn;\n      prevError = console.error;\n      prevGroup = console.group;\n      prevGroupCollapsed = console.groupCollapsed;\n      prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099\n\n      var props = {\n        configurable: true,\n        enumerable: true,\n        value: disabledLog,\n        writable: true\n      }; // $FlowFixMe Flow thinks console is immutable.\n\n      Object.defineProperties(console, {\n        info: props,\n        log: props,\n        warn: props,\n        error: props,\n        group: props,\n        groupCollapsed: props,\n        groupEnd: props\n      });\n      /* eslint-enable react-internal/no-production-logging */\n    }\n\n    disabledDepth++;\n  }\n}\nfunction reenableLogs() {\n  {\n    disabledDepth--;\n\n    if (disabledDepth === 0) {\n      /* eslint-disable react-internal/no-production-logging */\n      var props = {\n        configurable: true,\n        enumerable: true,\n        writable: true\n      }; // $FlowFixMe Flow thinks console is immutable.\n\n      Object.defineProperties(console, {\n        log: assign({}, props, {\n          value: prevLog\n        }),\n        info: assign({}, props, {\n          value: prevInfo\n        }),\n        warn: assign({}, props, {\n          value: prevWarn\n        }),\n        error: assign({}, props, {\n          value: prevError\n        }),\n        group: assign({}, props, {\n          value: prevGroup\n        }),\n        groupCollapsed: assign({}, props, {\n          value: prevGroupCollapsed\n        }),\n        groupEnd: assign({}, props, {\n          value: prevGroupEnd\n        })\n      });\n      /* eslint-enable react-internal/no-production-logging */\n    }\n\n    if (disabledDepth < 0) {\n      error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');\n    }\n  }\n}\n\nvar ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;\nvar prefix;\nfunction describeBuiltInComponentFrame(name, source, ownerFn) {\n  {\n    if (prefix === undefined) {\n      // Extract the VM specific prefix used by each line.\n      try {\n        throw Error();\n      } catch (x) {\n        var match = x.stack.trim().match(/\\n( *(at )?)/);\n        prefix = match && match[1] || '';\n      }\n    } // We use the prefix to ensure our stacks line up with native stack frames.\n\n\n    return '\\n' + prefix + name;\n  }\n}\nvar reentry = false;\nvar componentFrameCache;\n\n{\n  var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;\n  componentFrameCache = new PossiblyWeakMap();\n}\n\nfunction describeNativeComponentFrame(fn, construct) {\n  // If something asked for a stack inside a fake render, it should get ignored.\n  if ( !fn || reentry) {\n    return '';\n  }\n\n  {\n    var frame = componentFrameCache.get(fn);\n\n    if (frame !== undefined) {\n      return frame;\n    }\n  }\n\n  var control;\n  reentry = true;\n  var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.\n\n  Error.prepareStackTrace = undefined;\n  var previousDispatcher;\n\n  {\n    previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function\n    // for warnings.\n\n    ReactCurrentDispatcher.current = null;\n    disableLogs();\n  }\n\n  try {\n    // This should throw.\n    if (construct) {\n      // Something should be setting the props in the constructor.\n      var Fake = function () {\n        throw Error();\n      }; // $FlowFixMe\n\n\n      Object.defineProperty(Fake.prototype, 'props', {\n        set: function () {\n          // We use a throwing setter instead of frozen or non-writable props\n          // because that won't throw in a non-strict mode function.\n          throw Error();\n        }\n      });\n\n      if (typeof Reflect === 'object' && Reflect.construct) {\n        // We construct a different control for this case to include any extra\n        // frames added by the construct call.\n        try {\n          Reflect.construct(Fake, []);\n        } catch (x) {\n          control = x;\n        }\n\n        Reflect.construct(fn, [], Fake);\n      } else {\n        try {\n          Fake.call();\n        } catch (x) {\n          control = x;\n        }\n\n        fn.call(Fake.prototype);\n      }\n    } else {\n      try {\n        throw Error();\n      } catch (x) {\n        control = x;\n      }\n\n      fn();\n    }\n  } catch (sample) {\n    // This is inlined manually because closure doesn't do it for us.\n    if (sample && control && typeof sample.stack === 'string') {\n      // This extracts the first frame from the sample that isn't also in the control.\n      // Skipping one frame that we assume is the frame that calls the two.\n      var sampleLines = sample.stack.split('\\n');\n      var controlLines = control.stack.split('\\n');\n      var s = sampleLines.length - 1;\n      var c = controlLines.length - 1;\n\n      while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {\n        // We expect at least one stack frame to be shared.\n        // Typically this will be the root most one. However, stack frames may be\n        // cut off due to maximum stack limits. In this case, one maybe cut off\n        // earlier than the other. We assume that the sample is longer or the same\n        // and there for cut off earlier. So we should find the root most frame in\n        // the sample somewhere in the control.\n        c--;\n      }\n\n      for (; s >= 1 && c >= 0; s--, c--) {\n        // Next we find the first one that isn't the same which should be the\n        // frame that called our sample function and the control.\n        if (sampleLines[s] !== controlLines[c]) {\n          // In V8, the first line is describing the message but other VMs don't.\n          // If we're about to return the first line, and the control is also on the same\n          // line, that's a pretty good indicator that our sample threw at same line as\n          // the control. I.e. before we entered the sample frame. So we ignore this result.\n          // This can happen if you passed a class to function component, or non-function.\n          if (s !== 1 || c !== 1) {\n            do {\n              s--;\n              c--; // We may still have similar intermediate frames from the construct call.\n              // The next one that isn't the same should be our match though.\n\n              if (c < 0 || sampleLines[s] !== controlLines[c]) {\n                // V8 adds a \"new\" prefix for native classes. Let's remove it to make it prettier.\n                var _frame = '\\n' + sampleLines[s].replace(' at new ', ' at '); // If our component frame is labeled \"<anonymous>\"\n                // but we have a user-provided \"displayName\"\n                // splice it in to make the stack more readable.\n\n\n                if (fn.displayName && _frame.includes('<anonymous>')) {\n                  _frame = _frame.replace('<anonymous>', fn.displayName);\n                }\n\n                {\n                  if (typeof fn === 'function') {\n                    componentFrameCache.set(fn, _frame);\n                  }\n                } // Return the line we found.\n\n\n                return _frame;\n              }\n            } while (s >= 1 && c >= 0);\n          }\n\n          break;\n        }\n      }\n    }\n  } finally {\n    reentry = false;\n\n    {\n      ReactCurrentDispatcher.current = previousDispatcher;\n      reenableLogs();\n    }\n\n    Error.prepareStackTrace = previousPrepareStackTrace;\n  } // Fallback to just using the name if we couldn't make it throw.\n\n\n  var name = fn ? fn.displayName || fn.name : '';\n  var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';\n\n  {\n    if (typeof fn === 'function') {\n      componentFrameCache.set(fn, syntheticFrame);\n    }\n  }\n\n  return syntheticFrame;\n}\nfunction describeFunctionComponentFrame(fn, source, ownerFn) {\n  {\n    return describeNativeComponentFrame(fn, false);\n  }\n}\n\nfunction shouldConstruct(Component) {\n  var prototype = Component.prototype;\n  return !!(prototype && prototype.isReactComponent);\n}\n\nfunction describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {\n\n  if (type == null) {\n    return '';\n  }\n\n  if (typeof type === 'function') {\n    {\n      return describeNativeComponentFrame(type, shouldConstruct(type));\n    }\n  }\n\n  if (typeof type === 'string') {\n    return describeBuiltInComponentFrame(type);\n  }\n\n  switch (type) {\n    case REACT_SUSPENSE_TYPE:\n      return describeBuiltInComponentFrame('Suspense');\n\n    case REACT_SUSPENSE_LIST_TYPE:\n      return describeBuiltInComponentFrame('SuspenseList');\n  }\n\n  if (typeof type === 'object') {\n    switch (type.$$typeof) {\n      case REACT_FORWARD_REF_TYPE:\n        return describeFunctionComponentFrame(type.render);\n\n      case REACT_MEMO_TYPE:\n        // Memo may contain any component type so we recursively resolve it.\n        return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);\n\n      case REACT_LAZY_TYPE:\n        {\n          var lazyComponent = type;\n          var payload = lazyComponent._payload;\n          var init = lazyComponent._init;\n\n          try {\n            // Lazy may contain any component type so we recursively resolve it.\n            return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);\n          } catch (x) {}\n        }\n    }\n  }\n\n  return '';\n}\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nvar loggedTypeFailures = {};\nvar ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n\nfunction setCurrentlyValidatingElement(element) {\n  {\n    if (element) {\n      var owner = element._owner;\n      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n      ReactDebugCurrentFrame.setExtraStackFrame(stack);\n    } else {\n      ReactDebugCurrentFrame.setExtraStackFrame(null);\n    }\n  }\n}\n\nfunction checkPropTypes(typeSpecs, values, location, componentName, element) {\n  {\n    // $FlowFixMe This is okay but Flow doesn't know it.\n    var has = Function.call.bind(hasOwnProperty);\n\n    for (var typeSpecName in typeSpecs) {\n      if (has(typeSpecs, typeSpecName)) {\n        var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to\n        // fail the render phase where it didn't fail before. So we log it.\n        // After these have been cleaned up, we'll let them throw.\n\n        try {\n          // This is intentionally an invariant that gets caught. It's the same\n          // behavior as without this statement except with a better message.\n          if (typeof typeSpecs[typeSpecName] !== 'function') {\n            // eslint-disable-next-line react-internal/prod-error-codes\n            var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');\n            err.name = 'Invariant Violation';\n            throw err;\n          }\n\n          error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');\n        } catch (ex) {\n          error$1 = ex;\n        }\n\n        if (error$1 && !(error$1 instanceof Error)) {\n          setCurrentlyValidatingElement(element);\n\n          error('%s: type specification of %s' + ' `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error$1);\n\n          setCurrentlyValidatingElement(null);\n        }\n\n        if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {\n          // Only monitor this failure once because there tends to be a lot of the\n          // same error.\n          loggedTypeFailures[error$1.message] = true;\n          setCurrentlyValidatingElement(element);\n\n          error('Failed %s type: %s', location, error$1.message);\n\n          setCurrentlyValidatingElement(null);\n        }\n      }\n    }\n  }\n}\n\nvar isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare\n\nfunction isArray(a) {\n  return isArrayImpl(a);\n}\n\n/*\n * The `'' + value` pattern (used in in perf-sensitive code) throws for Symbol\n * and Temporal.* types. See https://github.com/facebook/react/pull/22064.\n *\n * The functions in this module will throw an easier-to-understand,\n * easier-to-debug exception with a clear errors message message explaining the\n * problem. (Instead of a confusing exception thrown inside the implementation\n * of the `value` object).\n */\n// $FlowFixMe only called in DEV, so void return is not possible.\nfunction typeName(value) {\n  {\n    // toStringTag is needed for namespaced types like Temporal.Instant\n    var hasToStringTag = typeof Symbol === 'function' && Symbol.toStringTag;\n    var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || 'Object';\n    return type;\n  }\n} // $FlowFixMe only called in DEV, so void return is not possible.\n\n\nfunction willCoercionThrow(value) {\n  {\n    try {\n      testStringCoercion(value);\n      return false;\n    } catch (e) {\n      return true;\n    }\n  }\n}\n\nfunction testStringCoercion(value) {\n  // If you ended up here by following an exception call stack, here's what's\n  // happened: you supplied an object or symbol value to React (as a prop, key,\n  // DOM attribute, CSS property, string ref, etc.) and when React tried to\n  // coerce it to a string using `'' + value`, an exception was thrown.\n  //\n  // The most common types that will cause this exception are `Symbol` instances\n  // and Temporal objects like `Temporal.Instant`. But any object that has a\n  // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this\n  // exception. (Library authors do this to prevent users from using built-in\n  // numeric operators like `+` or comparison operators like `>=` because custom\n  // methods are needed to perform accurate arithmetic or comparison.)\n  //\n  // To fix the problem, coerce this object or symbol value to a string before\n  // passing it to React. The most reliable way is usually `String(value)`.\n  //\n  // To find which value is throwing, check the browser or debugger console.\n  // Before this exception was thrown, there should be `console.error` output\n  // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the\n  // problem and how that type was used: key, atrribute, input value prop, etc.\n  // In most cases, this console output also shows the component and its\n  // ancestor components where the exception happened.\n  //\n  // eslint-disable-next-line react-internal/safe-string-coercion\n  return '' + value;\n}\nfunction checkKeyStringCoercion(value) {\n  {\n    if (willCoercionThrow(value)) {\n      error('The provided key is an unsupported type %s.' + ' This value must be coerced to a string before before using it here.', typeName(value));\n\n      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n    }\n  }\n}\n\nvar ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;\nvar RESERVED_PROPS = {\n  key: true,\n  ref: true,\n  __self: true,\n  __source: true\n};\nvar specialPropKeyWarningShown;\nvar specialPropRefWarningShown;\nvar didWarnAboutStringRefs;\n\n{\n  didWarnAboutStringRefs = {};\n}\n\nfunction hasValidRef(config) {\n  {\n    if (hasOwnProperty.call(config, 'ref')) {\n      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;\n\n      if (getter && getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n\n  return config.ref !== undefined;\n}\n\nfunction hasValidKey(config) {\n  {\n    if (hasOwnProperty.call(config, 'key')) {\n      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;\n\n      if (getter && getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n\n  return config.key !== undefined;\n}\n\nfunction warnIfStringRefCannotBeAutoConverted(config, self) {\n  {\n    if (typeof config.ref === 'string' && ReactCurrentOwner.current && self && ReactCurrentOwner.current.stateNode !== self) {\n      var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);\n\n      if (!didWarnAboutStringRefs[componentName]) {\n        error('Component \"%s\" contains the string ref \"%s\". ' + 'Support for string refs will be removed in a future major release. ' + 'This case cannot be automatically converted to an arrow function. ' + 'We ask you to manually fix this case by using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner.current.type), config.ref);\n\n        didWarnAboutStringRefs[componentName] = true;\n      }\n    }\n  }\n}\n\nfunction defineKeyPropWarningGetter(props, displayName) {\n  {\n    var warnAboutAccessingKey = function () {\n      if (!specialPropKeyWarningShown) {\n        specialPropKeyWarningShown = true;\n\n        error('%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);\n      }\n    };\n\n    warnAboutAccessingKey.isReactWarning = true;\n    Object.defineProperty(props, 'key', {\n      get: warnAboutAccessingKey,\n      configurable: true\n    });\n  }\n}\n\nfunction defineRefPropWarningGetter(props, displayName) {\n  {\n    var warnAboutAccessingRef = function () {\n      if (!specialPropRefWarningShown) {\n        specialPropRefWarningShown = true;\n\n        error('%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);\n      }\n    };\n\n    warnAboutAccessingRef.isReactWarning = true;\n    Object.defineProperty(props, 'ref', {\n      get: warnAboutAccessingRef,\n      configurable: true\n    });\n  }\n}\n/**\n * Factory method to create a new React element. This no longer adheres to\n * the class pattern, so do not use new to call it. Also, instanceof check\n * will not work. Instead test $$typeof field against Symbol.for('react.element') to check\n * if something is a React Element.\n *\n * @param {*} type\n * @param {*} props\n * @param {*} key\n * @param {string|object} ref\n * @param {*} owner\n * @param {*} self A *temporary* helper to detect places where `this` is\n * different from the `owner` when React.createElement is called, so that we\n * can warn. We want to get rid of owner and replace string `ref`s with arrow\n * functions, and as long as `this` and owner are the same, there will be no\n * change in behavior.\n * @param {*} source An annotation object (added by a transpiler or otherwise)\n * indicating filename, line number, and/or other information.\n * @internal\n */\n\n\nvar ReactElement = function (type, key, ref, self, source, owner, props) {\n  var element = {\n    // This tag allows us to uniquely identify this as a React Element\n    $$typeof: REACT_ELEMENT_TYPE,\n    // Built-in properties that belong on the element\n    type: type,\n    key: key,\n    ref: ref,\n    props: props,\n    // Record the component responsible for creating this element.\n    _owner: owner\n  };\n\n  {\n    // The validation flag is currently mutative. We put it on\n    // an external backing store so that we can freeze the whole object.\n    // This can be replaced with a WeakMap once they are implemented in\n    // commonly used development environments.\n    element._store = {}; // To make comparing ReactElements easier for testing purposes, we make\n    // the validation flag non-enumerable (where possible, which should\n    // include every environment we run tests in), so the test framework\n    // ignores it.\n\n    Object.defineProperty(element._store, 'validated', {\n      configurable: false,\n      enumerable: false,\n      writable: true,\n      value: false\n    }); // self and source are DEV only properties.\n\n    Object.defineProperty(element, '_self', {\n      configurable: false,\n      enumerable: false,\n      writable: false,\n      value: self\n    }); // Two elements created in two different places should be considered\n    // equal for testing purposes and therefore we hide it from enumeration.\n\n    Object.defineProperty(element, '_source', {\n      configurable: false,\n      enumerable: false,\n      writable: false,\n      value: source\n    });\n\n    if (Object.freeze) {\n      Object.freeze(element.props);\n      Object.freeze(element);\n    }\n  }\n\n  return element;\n};\n/**\n * https://github.com/reactjs/rfcs/pull/107\n * @param {*} type\n * @param {object} props\n * @param {string} key\n */\n\nfunction jsxDEV(type, config, maybeKey, source, self) {\n  {\n    var propName; // Reserved names are extracted\n\n    var props = {};\n    var key = null;\n    var ref = null; // Currently, key can be spread in as a prop. This causes a potential\n    // issue if key is also explicitly declared (ie. <div {...props} key=\"Hi\" />\n    // or <div key=\"Hi\" {...props} /> ). We want to deprecate key spread,\n    // but as an intermediary step, we will use jsxDEV for everything except\n    // <div {...props} key=\"Hi\" />, because we aren't currently able to tell if\n    // key is explicitly declared to be undefined or not.\n\n    if (maybeKey !== undefined) {\n      {\n        checkKeyStringCoercion(maybeKey);\n      }\n\n      key = '' + maybeKey;\n    }\n\n    if (hasValidKey(config)) {\n      {\n        checkKeyStringCoercion(config.key);\n      }\n\n      key = '' + config.key;\n    }\n\n    if (hasValidRef(config)) {\n      ref = config.ref;\n      warnIfStringRefCannotBeAutoConverted(config, self);\n    } // Remaining properties are added to a new props object\n\n\n    for (propName in config) {\n      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {\n        props[propName] = config[propName];\n      }\n    } // Resolve default props\n\n\n    if (type && type.defaultProps) {\n      var defaultProps = type.defaultProps;\n\n      for (propName in defaultProps) {\n        if (props[propName] === undefined) {\n          props[propName] = defaultProps[propName];\n        }\n      }\n    }\n\n    if (key || ref) {\n      var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;\n\n      if (key) {\n        defineKeyPropWarningGetter(props, displayName);\n      }\n\n      if (ref) {\n        defineRefPropWarningGetter(props, displayName);\n      }\n    }\n\n    return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);\n  }\n}\n\nvar ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;\nvar ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;\n\nfunction setCurrentlyValidatingElement$1(element) {\n  {\n    if (element) {\n      var owner = element._owner;\n      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n      ReactDebugCurrentFrame$1.setExtraStackFrame(stack);\n    } else {\n      ReactDebugCurrentFrame$1.setExtraStackFrame(null);\n    }\n  }\n}\n\nvar propTypesMisspellWarningShown;\n\n{\n  propTypesMisspellWarningShown = false;\n}\n/**\n * Verifies the object is a ReactElement.\n * See https://reactjs.org/docs/react-api.html#isvalidelement\n * @param {?object} object\n * @return {boolean} True if `object` is a ReactElement.\n * @final\n */\n\n\nfunction isValidElement(object) {\n  {\n    return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;\n  }\n}\n\nfunction getDeclarationErrorAddendum() {\n  {\n    if (ReactCurrentOwner$1.current) {\n      var name = getComponentNameFromType(ReactCurrentOwner$1.current.type);\n\n      if (name) {\n        return '\\n\\nCheck the render method of `' + name + '`.';\n      }\n    }\n\n    return '';\n  }\n}\n\nfunction getSourceInfoErrorAddendum(source) {\n  {\n    if (source !== undefined) {\n      var fileName = source.fileName.replace(/^.*[\\\\\\/]/, '');\n      var lineNumber = source.lineNumber;\n      return '\\n\\nCheck your code at ' + fileName + ':' + lineNumber + '.';\n    }\n\n    return '';\n  }\n}\n/**\n * Warn if there's no key explicitly set on dynamic arrays of children or\n * object keys are not valid. This allows us to keep track of children between\n * updates.\n */\n\n\nvar ownerHasKeyUseWarning = {};\n\nfunction getCurrentComponentErrorInfo(parentType) {\n  {\n    var info = getDeclarationErrorAddendum();\n\n    if (!info) {\n      var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;\n\n      if (parentName) {\n        info = \"\\n\\nCheck the top-level render call using <\" + parentName + \">.\";\n      }\n    }\n\n    return info;\n  }\n}\n/**\n * Warn if the element doesn't have an explicit key assigned to it.\n * This element is in an array. The array could grow and shrink or be\n * reordered. All children that haven't already been validated are required to\n * have a \"key\" property assigned to it. Error statuses are cached so a warning\n * will only be shown once.\n *\n * @internal\n * @param {ReactElement} element Element that requires a key.\n * @param {*} parentType element's parent's type.\n */\n\n\nfunction validateExplicitKey(element, parentType) {\n  {\n    if (!element._store || element._store.validated || element.key != null) {\n      return;\n    }\n\n    element._store.validated = true;\n    var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);\n\n    if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {\n      return;\n    }\n\n    ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a\n    // property, it may be the creator of the child that's responsible for\n    // assigning it a key.\n\n    var childOwner = '';\n\n    if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) {\n      // Give the component that originally created this child.\n      childOwner = \" It was passed a child from \" + getComponentNameFromType(element._owner.type) + \".\";\n    }\n\n    setCurrentlyValidatingElement$1(element);\n\n    error('Each child in a list should have a unique \"key\" prop.' + '%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);\n\n    setCurrentlyValidatingElement$1(null);\n  }\n}\n/**\n * Ensure that every element either is passed in a static location, in an\n * array with an explicit keys property defined, or in an object literal\n * with valid key property.\n *\n * @internal\n * @param {ReactNode} node Statically passed child of any type.\n * @param {*} parentType node's parent's type.\n */\n\n\nfunction validateChildKeys(node, parentType) {\n  {\n    if (typeof node !== 'object') {\n      return;\n    }\n\n    if (isArray(node)) {\n      for (var i = 0; i < node.length; i++) {\n        var child = node[i];\n\n        if (isValidElement(child)) {\n          validateExplicitKey(child, parentType);\n        }\n      }\n    } else if (isValidElement(node)) {\n      // This element was passed in a valid location.\n      if (node._store) {\n        node._store.validated = true;\n      }\n    } else if (node) {\n      var iteratorFn = getIteratorFn(node);\n\n      if (typeof iteratorFn === 'function') {\n        // Entry iterators used to provide implicit keys,\n        // but now we print a separate warning for them later.\n        if (iteratorFn !== node.entries) {\n          var iterator = iteratorFn.call(node);\n          var step;\n\n          while (!(step = iterator.next()).done) {\n            if (isValidElement(step.value)) {\n              validateExplicitKey(step.value, parentType);\n            }\n          }\n        }\n      }\n    }\n  }\n}\n/**\n * Given an element, validate that its props follow the propTypes definition,\n * provided by the type.\n *\n * @param {ReactElement} element\n */\n\n\nfunction validatePropTypes(element) {\n  {\n    var type = element.type;\n\n    if (type === null || type === undefined || typeof type === 'string') {\n      return;\n    }\n\n    var propTypes;\n\n    if (typeof type === 'function') {\n      propTypes = type.propTypes;\n    } else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.\n    // Inner props are checked in the reconciler.\n    type.$$typeof === REACT_MEMO_TYPE)) {\n      propTypes = type.propTypes;\n    } else {\n      return;\n    }\n\n    if (propTypes) {\n      // Intentionally inside to avoid triggering lazy initializers:\n      var name = getComponentNameFromType(type);\n      checkPropTypes(propTypes, element.props, 'prop', name, element);\n    } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {\n      propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:\n\n      var _name = getComponentNameFromType(type);\n\n      error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', _name || 'Unknown');\n    }\n\n    if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) {\n      error('getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.');\n    }\n  }\n}\n/**\n * Given a fragment, validate that it can only be provided with fragment props\n * @param {ReactElement} fragment\n */\n\n\nfunction validateFragmentProps(fragment) {\n  {\n    var keys = Object.keys(fragment.props);\n\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n\n      if (key !== 'children' && key !== 'key') {\n        setCurrentlyValidatingElement$1(fragment);\n\n        error('Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);\n\n        setCurrentlyValidatingElement$1(null);\n        break;\n      }\n    }\n\n    if (fragment.ref !== null) {\n      setCurrentlyValidatingElement$1(fragment);\n\n      error('Invalid attribute `ref` supplied to `React.Fragment`.');\n\n      setCurrentlyValidatingElement$1(null);\n    }\n  }\n}\n\nfunction jsxWithValidation(type, props, key, isStaticChildren, source, self) {\n  {\n    var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to\n    // succeed and there will likely be errors in render.\n\n    if (!validType) {\n      var info = '';\n\n      if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {\n        info += ' You likely forgot to export your component from the file ' + \"it's defined in, or you might have mixed up default and named imports.\";\n      }\n\n      var sourceInfo = getSourceInfoErrorAddendum(source);\n\n      if (sourceInfo) {\n        info += sourceInfo;\n      } else {\n        info += getDeclarationErrorAddendum();\n      }\n\n      var typeString;\n\n      if (type === null) {\n        typeString = 'null';\n      } else if (isArray(type)) {\n        typeString = 'array';\n      } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {\n        typeString = \"<\" + (getComponentNameFromType(type.type) || 'Unknown') + \" />\";\n        info = ' Did you accidentally export a JSX literal instead of a component?';\n      } else {\n        typeString = typeof type;\n      }\n\n      error('React.jsx: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);\n    }\n\n    var element = jsxDEV(type, props, key, source, self); // The result can be nullish if a mock or a custom function is used.\n    // TODO: Drop this when these are no longer allowed as the type argument.\n\n    if (element == null) {\n      return element;\n    } // Skip key warning if the type isn't valid since our key validation logic\n    // doesn't expect a non-string/function type and can throw confusing errors.\n    // We don't want exception behavior to differ between dev and prod.\n    // (Rendering will throw with a helpful message and as soon as the type is\n    // fixed, the key warnings will appear.)\n\n\n    if (validType) {\n      var children = props.children;\n\n      if (children !== undefined) {\n        if (isStaticChildren) {\n          if (isArray(children)) {\n            for (var i = 0; i < children.length; i++) {\n              validateChildKeys(children[i], type);\n            }\n\n            if (Object.freeze) {\n              Object.freeze(children);\n            }\n          } else {\n            error('React.jsx: Static children should always be an array. ' + 'You are likely explicitly calling React.jsxs or React.jsxDEV. ' + 'Use the Babel transform instead.');\n          }\n        } else {\n          validateChildKeys(children, type);\n        }\n      }\n    }\n\n    if (type === REACT_FRAGMENT_TYPE) {\n      validateFragmentProps(element);\n    } else {\n      validatePropTypes(element);\n    }\n\n    return element;\n  }\n} // These two functions exist to still get child warnings in dev\n// even with the prod transform. This means that jsxDEV is purely\n// opt-in behavior for better messages but that we won't stop\n// giving you warnings if you use production apis.\n\nfunction jsxWithValidationStatic(type, props, key) {\n  {\n    return jsxWithValidation(type, props, key, true);\n  }\n}\nfunction jsxWithValidationDynamic(type, props, key) {\n  {\n    return jsxWithValidation(type, props, key, false);\n  }\n}\n\nvar jsx =  jsxWithValidationDynamic ; // we may want to special case jsxs internally to take advantage of static children.\n// for now we can ship identical prod functions\n\nvar jsxs =  jsxWithValidationStatic ;\n\nexports.Fragment = REACT_FRAGMENT_TYPE;\nexports.jsx = jsx;\nexports.jsxs = jsxs;\n  })();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react/cjs/react-jsx-runtime.development.js\n"));

/***/ }),

/***/ "./node_modules/react/jsx-runtime.js":
/*!*******************************************!*\
  !*** ./node_modules/react/jsx-runtime.js ***!
  \*******************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\n\nif (false) {} else {\n  module.exports = __webpack_require__(/*! ./cjs/react-jsx-runtime.development.js */ \"./node_modules/react/cjs/react-jsx-runtime.development.js\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QvanN4LXJ1bnRpbWUuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsSUFBSSxLQUFxQyxFQUFFLEVBRTFDLENBQUM7QUFDRixFQUFFLCtJQUFrRTtBQUNwRSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvcmVhY3QvanN4LXJ1bnRpbWUuanM/MzRkMCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtanN4LXJ1bnRpbWUucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtanN4LXJ1bnRpbWUuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/react/jsx-runtime.js\n"));

/***/ }),

/***/ "./node_modules/nuka-carousel/dist/index.mjs":
/*!***************************************************!*\
  !*** ./node_modules/nuka-carousel/dist/index.mjs ***!
  \***************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Alignment: function() { return /* binding */ Alignment; },\n/* harmony export */   Directions: function() { return /* binding */ Directions; },\n/* harmony export */   NextButton: function() { return /* binding */ NextButton; },\n/* harmony export */   PagingDots: function() { return /* binding */ PagingDots; },\n/* harmony export */   Positions: function() { return /* binding */ Positions; },\n/* harmony export */   PreviousButton: function() { return /* binding */ PreviousButton; },\n/* harmony export */   ScrollMode: function() { return /* binding */ ScrollMode; },\n/* harmony export */   \"default\": function() { return /* binding */ Carousel; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react/jsx-runtime */ \"./node_modules/react/jsx-runtime.js\");\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __pow = Math.pow;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\n\n// src/carousel.tsx\n\n\n// src/slide.tsx\n\n\n// src/hooks/use-slide-intersection-observer.ts\n\nvar useSlideIntersectionObserver = (elementRef, rootRef, callback) => {\n  const [entry, setEntry] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)();\n  const callbackRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(callback);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    callbackRef.current = callback;\n  }, [callback]);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    const node = elementRef == null ? void 0 : elementRef.current;\n    const root = rootRef == null ? void 0 : rootRef.current;\n    if (!window.IntersectionObserver || !node || !root)\n      return;\n    const observer = new IntersectionObserver(\n      (entries) => {\n        entries.forEach((entry2) => {\n          setEntry(entry2);\n          callbackRef.current(entry2);\n        });\n      },\n      {\n        threshold: [0.05, 0.95],\n        root\n      }\n    );\n    observer.observe(node);\n    return () => observer.disconnect();\n  }, [elementRef, rootRef]);\n  return entry;\n};\n\n// src/slide.tsx\n\nvar getSlideWidth = (count, wrapAround) => `${wrapAround ? 100 / (3 * count) : 100 / count}%`;\nvar getSlideStyles = (count, isCurrentSlide, isVisibleSlide, wrapAround, cellSpacing, animation, speed, zoomScale, adaptiveHeight, initializedAdaptiveHeight, slideWidth) => {\n  const width = slideWidth != null ? slideWidth : getSlideWidth(count, wrapAround);\n  const visibleSlideOpacity = isVisibleSlide ? 1 : 0;\n  const animationSpeed = animation === \"fade\" ? 200 : 500;\n  let height = \"auto\";\n  if (adaptiveHeight) {\n    if (initializedAdaptiveHeight) {\n      height = \"100%\";\n    } else if (isVisibleSlide) {\n      height = \"auto\";\n    } else {\n      height = \"0\";\n    }\n  }\n  return {\n    width,\n    height,\n    padding: `0 ${cellSpacing ? cellSpacing / 2 : 0}px`,\n    transition: animation ? `${speed || animationSpeed}ms ease 0s` : void 0,\n    transform: animation === \"zoom\" ? `scale(${isCurrentSlide && isVisibleSlide ? 1 : zoomScale || 0.85})` : void 0,\n    opacity: animation === \"fade\" ? visibleSlideOpacity : 1\n  };\n};\nvar generateIndex = (index, count, typeOfSlide) => {\n  if (typeOfSlide === \"prev-cloned\") {\n    return index - count;\n  }\n  if (typeOfSlide === \"next-cloned\") {\n    return index + count;\n  }\n  return index;\n};\nvar Slide = ({\n  count,\n  children,\n  index,\n  isCurrentSlide,\n  typeOfSlide,\n  wrapAround,\n  cellSpacing,\n  slideWidth,\n  animation,\n  speed,\n  zoomScale,\n  onVisibleSlideHeightChange,\n  adaptiveHeight,\n  initializedAdaptiveHeight,\n  updateIOEntry,\n  id,\n  carouselRef\n}) => {\n  var _a;\n  const customIndex = wrapAround ? generateIndex(index, count, typeOfSlide) : index;\n  const slideRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n  const entry = useSlideIntersectionObserver(slideRef, carouselRef, (entry2) => {\n    updateIOEntry(id, (entry2 == null ? void 0 : entry2.intersectionRatio) >= 0.95);\n  });\n  const isVisible = !!(entry == null ? void 0 : entry.isIntersecting);\n  const isFullyVisible = ((_a = entry == null ? void 0 : entry.intersectionRatio) != null ? _a : 1) >= 0.95;\n  const prevIsVisibleRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    var _a2;\n    const node = slideRef.current;\n    if (node) {\n      const slideHeight = (_a2 = node.getBoundingClientRect()) == null ? void 0 : _a2.height;\n      const prevIsVisible = prevIsVisibleRef.current;\n      if (isVisible && !prevIsVisible) {\n        onVisibleSlideHeightChange(customIndex, slideHeight);\n      } else if (!isVisible && prevIsVisible) {\n        onVisibleSlideHeightChange(customIndex, null);\n      }\n      prevIsVisibleRef.current = isVisible;\n    }\n  }, [customIndex, isVisible, onVisibleSlideHeightChange]);\n  const currentSlideClass = isCurrentSlide && isFullyVisible ? \" slide-current\" : \"\";\n  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n    \"div\",\n    __spreadProps(__spreadValues({\n      ref: slideRef\n    }, { inert: isFullyVisible ? void 0 : \"true\" }), {\n      className: `slide${currentSlideClass}${typeOfSlide ? ` ${typeOfSlide}` : \"\"}${isFullyVisible ? \" slide-visible\" : \"\"}`,\n      style: getSlideStyles(\n        count,\n        isCurrentSlide,\n        isFullyVisible,\n        wrapAround,\n        cellSpacing,\n        animation,\n        speed,\n        zoomScale,\n        adaptiveHeight,\n        initializedAdaptiveHeight,\n        slideWidth\n      ),\n      children\n    })\n  );\n};\nvar slide_default = Slide;\n\n// src/announce-slide.tsx\n\nvar styles = {\n  position: \"absolute\",\n  width: \"1px\",\n  height: \"1px\",\n  overflow: \"hidden\",\n  padding: 0,\n  margin: \"-1px\",\n  clip: \"rect(0, 0, 0, 0)\",\n  whiteSpace: \"nowrap\",\n  border: 0\n};\nvar AnnounceSlide = ({\n  message,\n  ariaLive = \"polite\"\n}) => /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\", { \"aria-live\": ariaLive, \"aria-atomic\": \"true\", style: styles, tabIndex: -1, children: message });\nvar defaultRenderAnnounceSlideMessage = ({\n  currentSlide,\n  count\n}) => `Slide ${currentSlide + 1} of ${count}`;\nvar announce_slide_default = AnnounceSlide;\n\n// src/slider-list.tsx\n\n\n// src/default-controls.tsx\n\n\n// src/types.ts\nvar Alignment = /* @__PURE__ */ ((Alignment2) => {\n  Alignment2[\"Center\"] = \"center\";\n  Alignment2[\"Right\"] = \"right\";\n  Alignment2[\"Left\"] = \"left\";\n  return Alignment2;\n})(Alignment || {});\nvar Directions = /* @__PURE__ */ ((Directions2) => {\n  Directions2[\"Next\"] = \"next\";\n  Directions2[\"Prev\"] = \"prev\";\n  Directions2[\"Up\"] = \"up\";\n  Directions2[\"Down\"] = \"down\";\n  return Directions2;\n})(Directions || {});\nvar Positions = /* @__PURE__ */ ((Positions2) => {\n  Positions2[\"TopLeft\"] = \"TopLeft\";\n  Positions2[\"TopCenter\"] = \"TopCenter\";\n  Positions2[\"TopRight\"] = \"TopRight\";\n  Positions2[\"CenterLeft\"] = \"CenterLeft\";\n  Positions2[\"CenterCenter\"] = \"CenterCenter\";\n  Positions2[\"CenterRight\"] = \"CenterRight\";\n  Positions2[\"BottomLeft\"] = \"BottomLeft\";\n  Positions2[\"BottomCenter\"] = \"BottomCenter\";\n  Positions2[\"BottomRight\"] = \"BottomRight\";\n  return Positions2;\n})(Positions || {});\nvar ScrollMode = /* @__PURE__ */ ((ScrollMode2) => {\n  ScrollMode2[\"page\"] = \"page\";\n  ScrollMode2[\"remainder\"] = \"remainder\";\n  return ScrollMode2;\n})(ScrollMode || {});\n\n// src/utils.ts\nvar getNextMoveIndex = (scrollMode, wrapAround, currentSlide, slideCount, slidesToScroll, slidesToShow, cellAlign) => {\n  if (wrapAround) {\n    return currentSlide + slidesToScroll;\n  }\n  if (currentSlide >= slideCount - 1 || cellAlign === \"left\" && currentSlide >= slideCount - slidesToShow) {\n    return currentSlide;\n  }\n  if (scrollMode === \"remainder\" /* remainder */ && cellAlign === \"left\") {\n    return Math.min(currentSlide + slidesToScroll, slideCount - slidesToShow);\n  }\n  return Math.min(currentSlide + slidesToScroll, slideCount - 1);\n};\nvar getPrevMoveIndex = (scrollMode, wrapAround, currentSlide, slidesToScroll, slidesToShow, cellAlign) => {\n  if (wrapAround) {\n    return currentSlide - slidesToScroll;\n  }\n  if (currentSlide <= 0 || cellAlign === \"right\" && currentSlide <= slidesToShow - 1) {\n    return currentSlide;\n  }\n  if (scrollMode === \"remainder\" /* remainder */ && cellAlign === \"right\") {\n    return Math.max(currentSlide - slidesToScroll, slidesToShow - 1);\n  }\n  return Math.max(currentSlide - slidesToScroll, 0);\n};\nvar getDefaultSlideIndex = (slideIndex, slideCount, slidesToShow, slidesToScroll, cellAlign, autoplayReverse, scrollMode) => {\n  if (slideIndex !== void 0) {\n    return slideIndex;\n  }\n  const dotIndexes = getDotIndexes(\n    slideCount,\n    slidesToScroll,\n    scrollMode,\n    slidesToShow,\n    false,\n    cellAlign\n  );\n  return autoplayReverse ? dotIndexes[dotIndexes.length - 1] : dotIndexes[0];\n};\nvar getBoundedIndex = (rawIndex, slideCount) => {\n  return (rawIndex % slideCount + slideCount) % slideCount;\n};\n\n// src/default-controls.tsx\n\nvar defaultButtonStyles = (disabled) => ({\n  border: 0,\n  background: \"rgba(0,0,0,0.4)\",\n  color: \"white\",\n  padding: 10,\n  textTransform: \"uppercase\",\n  opacity: disabled ? 0.3 : 1,\n  cursor: disabled ? \"not-allowed\" : \"pointer\"\n});\nvar prevButtonDisabled = ({\n  cellAlign,\n  currentSlide,\n  slidesToShow,\n  wrapAround\n}) => {\n  if (wrapAround) {\n    return false;\n  }\n  if (currentSlide === 0) {\n    return true;\n  }\n  if (cellAlign === \"right\" && currentSlide <= slidesToShow - 1) {\n    return true;\n  }\n  return false;\n};\nvar PreviousButton = ({\n  previousSlide,\n  defaultControlsConfig: {\n    prevButtonClassName,\n    prevButtonStyle = {},\n    prevButtonText,\n    prevButtonOnClick\n  },\n  onUserNavigation,\n  previousDisabled: disabled\n}) => {\n  const handleClick = (event) => {\n    prevButtonOnClick == null ? void 0 : prevButtonOnClick(event);\n    if (event.defaultPrevented)\n      return;\n    onUserNavigation(event);\n    event.preventDefault();\n    previousSlide();\n  };\n  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n    \"button\",\n    {\n      className: prevButtonClassName,\n      style: __spreadValues(__spreadValues({}, defaultButtonStyles(disabled)), prevButtonStyle),\n      disabled,\n      onClick: handleClick,\n      \"aria-label\": \"previous\",\n      type: \"button\",\n      children: prevButtonText || \"Prev\"\n    }\n  );\n};\nvar nextButtonDisabled = ({\n  cellAlign,\n  currentSlide,\n  slideCount,\n  slidesToShow,\n  wrapAround\n}) => {\n  if (wrapAround) {\n    return false;\n  }\n  if (currentSlide >= slideCount - 1) {\n    return true;\n  }\n  if (cellAlign === \"left\" && currentSlide >= slideCount - slidesToShow) {\n    return true;\n  }\n  return false;\n};\nvar NextButton = ({\n  nextSlide,\n  defaultControlsConfig: {\n    nextButtonClassName,\n    nextButtonStyle = {},\n    nextButtonText,\n    nextButtonOnClick\n  },\n  nextDisabled: disabled,\n  onUserNavigation\n}) => {\n  const handleClick = (event) => {\n    nextButtonOnClick == null ? void 0 : nextButtonOnClick(event);\n    if (event.defaultPrevented)\n      return;\n    onUserNavigation(event);\n    event.preventDefault();\n    nextSlide();\n  };\n  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n    \"button\",\n    {\n      className: nextButtonClassName,\n      style: __spreadValues(__spreadValues({}, defaultButtonStyles(disabled)), nextButtonStyle),\n      disabled,\n      onClick: handleClick,\n      \"aria-label\": \"next\",\n      type: \"button\",\n      children: nextButtonText || \"Next\"\n    }\n  );\n};\nvar getDotIndexes = (slideCount, slidesToScroll, scrollMode, slidesToShow, wrapAround, cellAlign) => {\n  const dotIndexes = [];\n  const scrollSlides = slidesToScroll <= 0 ? 1 : slidesToScroll;\n  if (wrapAround) {\n    for (let i = 0; i < slideCount; i += scrollSlides) {\n      dotIndexes.push(i);\n    }\n    return dotIndexes;\n  }\n  if (cellAlign === \"center\") {\n    for (let i = 0; i < slideCount - 1; i += scrollSlides) {\n      dotIndexes.push(i);\n    }\n    if (slideCount > 0) {\n      dotIndexes.push(slideCount - 1);\n    }\n    return dotIndexes;\n  }\n  if (cellAlign === \"left\") {\n    if (slidesToShow >= slideCount) {\n      return [0];\n    }\n    const lastPossibleIndexWithoutWhitespace = slideCount - slidesToShow;\n    for (let i = 0; i < lastPossibleIndexWithoutWhitespace; i += scrollSlides) {\n      dotIndexes.push(i);\n    }\n    if (scrollMode === \"remainder\" /* remainder */) {\n      dotIndexes.push(lastPossibleIndexWithoutWhitespace);\n    } else {\n      dotIndexes.push(dotIndexes[dotIndexes.length - 1] + scrollSlides);\n    }\n    return dotIndexes;\n  }\n  if (cellAlign === \"right\") {\n    if (slidesToShow >= slideCount) {\n      return [slideCount - 1];\n    }\n    const firstPossibleIndexWithoutWhitespace = slidesToShow - 1;\n    if (scrollMode === \"remainder\" /* remainder */) {\n      for (let i = firstPossibleIndexWithoutWhitespace; i < slideCount - 1; i += scrollSlides) {\n        dotIndexes.push(i);\n      }\n      dotIndexes.push(slideCount - 1);\n    } else {\n      for (let i = slideCount - 1; i > firstPossibleIndexWithoutWhitespace; i -= scrollSlides) {\n        dotIndexes.push(i);\n      }\n      dotIndexes.push(dotIndexes[dotIndexes.length - 1] - scrollSlides);\n      dotIndexes.reverse();\n    }\n    return dotIndexes;\n  }\n  return dotIndexes;\n};\nvar PagingDots = ({\n  pagingDotsIndices,\n  defaultControlsConfig: {\n    pagingDotsContainerClassName,\n    pagingDotsClassName,\n    pagingDotsStyle = {},\n    pagingDotsOnClick\n  },\n  currentSlide,\n  onUserNavigation,\n  slideCount,\n  goToSlide\n}) => {\n  const listStyles = {\n    position: \"relative\",\n    top: -10,\n    display: \"flex\",\n    margin: 0,\n    padding: 0,\n    listStyleType: \"none\"\n  };\n  const getButtonStyles = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(\n    (active) => ({\n      cursor: \"pointer\",\n      opacity: active ? 1 : 0.5,\n      background: \"transparent\",\n      border: \"none\",\n      fill: \"black\"\n    }),\n    []\n  );\n  const currentSlideBounded = getBoundedIndex(currentSlide, slideCount);\n  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"ul\", { className: pagingDotsContainerClassName, style: listStyles, children: pagingDotsIndices.map((slideIndex, i) => {\n    const isActive = currentSlideBounded === slideIndex || // sets navigation dots active if the current slide falls in the current index range\n    currentSlideBounded < slideIndex && (i === 0 || currentSlideBounded > pagingDotsIndices[i - 1]);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n      \"li\",\n      {\n        className: isActive ? \"paging-item active\" : \"paging-item\",\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n          \"button\",\n          {\n            className: pagingDotsClassName,\n            type: \"button\",\n            style: __spreadValues(__spreadValues({}, getButtonStyles(isActive)), pagingDotsStyle),\n            onClick: (event) => {\n              pagingDotsOnClick == null ? void 0 : pagingDotsOnClick(event);\n              if (event.defaultPrevented)\n                return;\n              onUserNavigation(event);\n              goToSlide(slideIndex);\n            },\n            \"aria-label\": `slide ${slideIndex + 1} bullet`,\n            \"aria-selected\": isActive,\n            children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n              \"svg\",\n              {\n                className: \"paging-dot\",\n                width: \"6\",\n                height: \"6\",\n                \"aria-hidden\": \"true\",\n                focusable: \"false\",\n                viewBox: \"0 0 6 6\",\n                children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"circle\", { cx: \"3\", cy: \"3\", r: \"3\" })\n              }\n            )\n          }\n        )\n      },\n      slideIndex\n    );\n  }) });\n};\n\n// src/hooks/use-tween.ts\n\nvar useTween = (durationMs, easingFunction, navigationNum, shouldInterrupt) => {\n  const [normalizedTimeRaw, setNormalizedTime] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(1);\n  const startTime = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(Date.now());\n  const rAF = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\n  const isFirstRender = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(true);\n  const lastNavigationNum = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n  const normalizedTime = lastNavigationNum.current === null || lastNavigationNum.current === navigationNum || shouldInterrupt ? normalizedTimeRaw : 0;\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    lastNavigationNum.current = navigationNum;\n    if (isFirstRender.current) {\n      isFirstRender.current = false;\n      return;\n    }\n    if (shouldInterrupt) {\n      return;\n    }\n    startTime.current = Date.now();\n    setNormalizedTime(0);\n    const tick = () => {\n      rAF.current = requestAnimationFrame(() => {\n        const currentTime = Date.now();\n        const normalizedTime2 = Math.min(\n          1,\n          (currentTime - startTime.current) / durationMs\n        );\n        setNormalizedTime(normalizedTime2);\n        if (normalizedTime2 < 1) {\n          tick();\n        } else {\n          rAF.current = void 0;\n        }\n      });\n    };\n    tick();\n    return () => {\n      if (rAF.current !== void 0) {\n        cancelAnimationFrame(rAF.current);\n        setNormalizedTime(1);\n      }\n    };\n  }, [navigationNum, durationMs, shouldInterrupt]);\n  return {\n    isAnimating: normalizedTime !== 1,\n    value: easingFunction(normalizedTime)\n  };\n};\n\n// src/slider-list.tsx\n\nvar getPercentOffsetForSlide = (currentSlide, slideCount, slidesToShow, cellAlign, wrapAround) => {\n  const renderedSlideCount = wrapAround ? 3 * slideCount : slideCount;\n  const singleSlidePercentOfWhole = 100 / renderedSlideCount;\n  let slide0Offset = wrapAround ? -100 / 3 : 0;\n  if (cellAlign === \"right\" && slidesToShow > 1) {\n    const excessSlides = slidesToShow - 1;\n    slide0Offset += singleSlidePercentOfWhole * excessSlides;\n  }\n  if (cellAlign === \"center\" && slidesToShow > 1) {\n    const excessSlides = slidesToShow - 1;\n    const excessLeftSlides = excessSlides / 2;\n    slide0Offset += singleSlidePercentOfWhole * excessLeftSlides;\n  }\n  const currentSlideOffsetFrom0 = 100 / renderedSlideCount * currentSlide;\n  return slide0Offset - currentSlideOffsetFrom0;\n};\nvar SliderList = react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(\n  ({\n    animation,\n    animationDistance,\n    cellAlign,\n    children,\n    currentSlide,\n    disableAnimation,\n    disableEdgeSwiping,\n    draggedOffset,\n    easing,\n    edgeEasing,\n    isDragging,\n    scrollMode,\n    slideCount,\n    slidesToScroll,\n    slidesToShow,\n    speed,\n    wrapAround,\n    slideWidth,\n    setIsAnimating\n  }, forwardedRef) => {\n    const renderedSlideCount = wrapAround ? 3 * slideCount : slideCount;\n    const listVisibleWidth = slideWidth ? `calc(${slideWidth} * ${renderedSlideCount})` : `${renderedSlideCount * 100 / slidesToShow}%`;\n    const percentOffsetForSlideProps = [\n      slideCount,\n      slidesToShow,\n      cellAlign,\n      wrapAround\n    ];\n    const dotIndexes = getDotIndexes(\n      slideCount,\n      slidesToScroll,\n      scrollMode,\n      slidesToShow,\n      wrapAround,\n      cellAlign\n    );\n    let clampedDraggedOffset = `${draggedOffset}px`;\n    if (isDragging && disableEdgeSwiping && !wrapAround) {\n      const clampOffsets = [\n        dotIndexes[0],\n        dotIndexes[dotIndexes.length - 1]\n      ].map(\n        (index) => getPercentOffsetForSlide(index, ...percentOffsetForSlideProps)\n      );\n      clampedDraggedOffset = `clamp(${clampOffsets[1]}%, ${draggedOffset}px, ${clampOffsets[0]}%)`;\n    }\n    const slideBasedOffset = getPercentOffsetForSlide(\n      currentSlide,\n      ...percentOffsetForSlideProps\n    );\n    const isEdgeEasing = !disableEdgeSwiping && !wrapAround && (currentSlide === dotIndexes[0] && animationDistance < 0 || currentSlide === dotIndexes[dotIndexes.length - 1] && animationDistance > 0);\n    const { value: transition, isAnimating } = useTween(\n      speed,\n      !isEdgeEasing ? easing : edgeEasing,\n      // animationDistance is assumed to be unique enough that it can be used to\n      // detect when a new animation should start. This is used in addition to\n      // currentSlide because some animations, such as those with edgeEasing, do\n      // not occur due to a change in value of currentSlide\n      currentSlide + animationDistance,\n      isDragging || disableAnimation || animation === \"fade\"\n    );\n    let positioning;\n    if (isDragging || slideBasedOffset !== 0 || isAnimating) {\n      if (isDragging) {\n        positioning = `translateX(${clampedDraggedOffset})`;\n      } else {\n        const transitionOffset = isAnimating ? (1 - transition) * animationDistance : 0;\n        positioning = `translateX(calc(${slideBasedOffset}% - ${transitionOffset}px))`;\n      }\n    }\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n      setIsAnimating(isAnimating);\n    }, [isAnimating, setIsAnimating]);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n      \"div\",\n      {\n        ref: forwardedRef,\n        className: \"slider-list\",\n        style: {\n          width: listVisibleWidth,\n          textAlign: \"left\",\n          userSelect: \"auto\",\n          transform: positioning,\n          display: \"flex\"\n        },\n        children\n      }\n    );\n  }\n);\nSliderList.displayName = \"SliderList\";\n\n// src/controls.tsx\n\n\n// src/control-styles.ts\nvar commonStyles = {\n  position: \"absolute\",\n  display: \"flex\",\n  zIndex: 1,\n  top: 0,\n  left: 0,\n  bottom: 0,\n  right: 0\n};\nvar getControlContainerFlexStyles = (pos) => {\n  let alignItems;\n  switch (pos) {\n    case \"TopLeft\" /* TopLeft */:\n    case \"TopCenter\" /* TopCenter */:\n    case \"TopRight\" /* TopRight */:\n      alignItems = \"flex-start\";\n      break;\n    case \"CenterLeft\" /* CenterLeft */:\n    case \"CenterCenter\" /* CenterCenter */:\n    case \"CenterRight\" /* CenterRight */:\n      alignItems = \"center\";\n      break;\n    case \"BottomLeft\" /* BottomLeft */:\n    case \"BottomCenter\" /* BottomCenter */:\n    case \"BottomRight\" /* BottomRight */:\n      alignItems = \"flex-end\";\n      break;\n  }\n  let justifyContent;\n  switch (pos) {\n    case \"TopLeft\" /* TopLeft */:\n    case \"CenterLeft\" /* CenterLeft */:\n    case \"BottomLeft\" /* BottomLeft */:\n      justifyContent = \"flex-start\";\n      break;\n    case \"TopCenter\" /* TopCenter */:\n    case \"CenterCenter\" /* CenterCenter */:\n    case \"BottomCenter\" /* BottomCenter */:\n      justifyContent = \"center\";\n      break;\n    case \"TopRight\" /* TopRight */:\n    case \"CenterRight\" /* CenterRight */:\n    case \"BottomRight\" /* BottomRight */:\n      justifyContent = \"flex-end\";\n      break;\n  }\n  return { alignItems, justifyContent };\n};\nvar getControlContainerStyles = (pos) => {\n  return __spreadValues(__spreadValues({}, getControlContainerFlexStyles(pos)), commonStyles);\n};\n\n// src/controls.tsx\n\nvar controlsMap = [\n  { funcName: \"renderTopLeftControls\", key: \"TopLeft\" /* TopLeft */ },\n  { funcName: \"renderTopCenterControls\", key: \"TopCenter\" /* TopCenter */ },\n  { funcName: \"renderTopRightControls\", key: \"TopRight\" /* TopRight */ },\n  { funcName: \"renderCenterLeftControls\", key: \"CenterLeft\" /* CenterLeft */ },\n  { funcName: \"renderCenterCenterControls\", key: \"CenterCenter\" /* CenterCenter */ },\n  { funcName: \"renderCenterRightControls\", key: \"CenterRight\" /* CenterRight */ },\n  { funcName: \"renderBottomLeftControls\", key: \"BottomLeft\" /* BottomLeft */ },\n  { funcName: \"renderBottomCenterControls\", key: \"BottomCenter\" /* BottomCenter */ },\n  { funcName: \"renderBottomRightControls\", key: \"BottomRight\" /* BottomRight */ }\n];\nvar renderControls = (props, slideCount, currentSlide, goToSlide, nextSlide, prevSlide, slidesToScroll) => {\n  if (props.withoutControls) {\n    return null;\n  }\n  const disableCheckProps = __spreadProps(__spreadValues({}, props), {\n    currentSlide,\n    slideCount\n  });\n  const nextDisabled = nextButtonDisabled(disableCheckProps);\n  const previousDisabled = prevButtonDisabled(disableCheckProps);\n  const pagingDotsIndices = getDotIndexes(\n    slideCount,\n    slidesToScroll,\n    props.scrollMode,\n    props.slidesToShow,\n    props.wrapAround,\n    props.cellAlign\n  );\n  return controlsMap.map((control) => {\n    var _a;\n    if (!props[control.funcName] || typeof props[control.funcName] !== \"function\") {\n      return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, {}, control.funcName);\n    }\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n      \"div\",\n      {\n        style: __spreadProps(__spreadValues({}, getControlContainerStyles(control.key)), {\n          pointerEvents: \"none\"\n        }),\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n          \"div\",\n          {\n            className: [\n              `slider-control-${control.key.toLowerCase()}`,\n              props.defaultControlsConfig.containerClassName || \"\"\n            ].join(\" \").trim(),\n            style: { pointerEvents: \"auto\" },\n            children: (_a = props[control.funcName]) == null ? void 0 : _a.call(props, {\n              cellAlign: props.cellAlign,\n              cellSpacing: props.cellSpacing,\n              currentSlide,\n              defaultControlsConfig: props.defaultControlsConfig || {},\n              pagingDotsIndices,\n              goToSlide,\n              nextDisabled,\n              nextSlide,\n              onUserNavigation: props.onUserNavigation,\n              previousDisabled,\n              previousSlide: prevSlide,\n              scrollMode: props.scrollMode,\n              slideCount,\n              slidesToScroll,\n              slidesToShow: props.slidesToShow || 1,\n              vertical: props.vertical,\n              wrapAround: props.wrapAround\n            })\n          }\n        )\n      },\n      control.funcName\n    );\n  });\n};\nvar controls_default = renderControls;\n\n// src/default-carousel-props.tsx\n\nvar easeOut = (t) => __pow(t - 1, 3) + 1;\nvar defaultProps = {\n  adaptiveHeight: false,\n  adaptiveHeightAnimation: true,\n  afterSlide: () => {\n  },\n  autoplay: false,\n  autoplayInterval: 3e3,\n  autoplayReverse: false,\n  beforeSlide: () => {\n  },\n  cellAlign: \"left\",\n  cellSpacing: 0,\n  defaultControlsConfig: {},\n  disableAnimation: false,\n  disableEdgeSwiping: false,\n  dragging: true,\n  dragThreshold: 0.5,\n  easing: easeOut,\n  edgeEasing: easeOut,\n  enableKeyboardControls: false,\n  frameAriaLabel: \"carousel-slider\",\n  keyCodeConfig: {\n    nextSlide: [39, 68, 38, 87],\n    previousSlide: [37, 65, 40, 83],\n    firstSlide: [81],\n    lastSlide: [69],\n    pause: [32]\n  },\n  onDragStart: () => {\n  },\n  onDrag: () => {\n  },\n  onDragEnd: () => {\n  },\n  onUserNavigation: () => {\n  },\n  pauseOnHover: true,\n  renderAnnounceSlideMessage: defaultRenderAnnounceSlideMessage,\n  renderBottomCenterControls: (props) => /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(PagingDots, __spreadValues({}, props)),\n  renderCenterLeftControls: (props) => /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(PreviousButton, __spreadValues({}, props)),\n  renderCenterRightControls: (props) => /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(NextButton, __spreadValues({}, props)),\n  scrollMode: \"page\" /* page */,\n  slidesToScroll: 1,\n  slidesToShow: 1,\n  speed: 500,\n  style: {},\n  swiping: true,\n  vertical: false,\n  withoutControls: false,\n  wrapAround: false,\n  children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Fragment, {})\n};\nvar default_carousel_props_default = defaultProps;\n\n// src/hooks/use-frame-height.ts\n\n\n// src/hooks/use-state-with-ref.ts\n\nvar useStateWithRef = (initialState) => {\n  const [value, setValue] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(initialState);\n  const valueRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(initialState);\n  const setValueAndRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((newValue) => {\n    valueRef.current = newValue;\n    setValue(newValue);\n  }, []);\n  return [value, setValueAndRef, valueRef];\n};\n\n// src/hooks/use-frame-height.ts\nvar useFrameHeight = (adaptiveHeight, slidesToShow, slideCount) => {\n  const [visibleHeights, setVisibleHeights, visibleHeightsRef] = useStateWithRef([]);\n  const [initializedAdaptiveHeight, setInitializedAdaptiveHeight] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n  const handleVisibleSlideHeightChange = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(\n    (slideIndex, height) => {\n      const latestVisibleHeights = visibleHeightsRef.current;\n      let newVisibleHeights;\n      if (height === null) {\n        newVisibleHeights = latestVisibleHeights.filter(\n          (slideHeight) => slideHeight.slideIndex !== slideIndex\n        );\n      } else {\n        newVisibleHeights = [...latestVisibleHeights, { slideIndex, height }];\n      }\n      setVisibleHeights(newVisibleHeights);\n      if (newVisibleHeights.length >= Math.min(slideCount, Math.ceil(slidesToShow))) {\n        setInitializedAdaptiveHeight(true);\n      }\n    },\n    [slideCount, setVisibleHeights, slidesToShow, visibleHeightsRef]\n  );\n  const frameHeight = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n    if (adaptiveHeight) {\n      if (!initializedAdaptiveHeight) {\n        return \"auto\";\n      }\n      const maxHeight = Math.max(\n        0,\n        ...visibleHeights.map((height) => height.height)\n      );\n      return `${maxHeight}px`;\n    } else {\n      return \"auto\";\n    }\n  }, [adaptiveHeight, initializedAdaptiveHeight, visibleHeights]);\n  return {\n    handleVisibleSlideHeightChange,\n    frameHeight,\n    initializedAdaptiveHeight\n  };\n};\n\n// src/hooks/use-forward-ref.ts\n\nvar useForwardRef = (ref) => {\n  const targetRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    if (!ref)\n      return;\n    if (typeof ref === \"function\") {\n      ref(targetRef.current);\n    } else {\n      ref.current = targetRef.current;\n    }\n  }, [ref]);\n  return targetRef;\n};\n\n// src/carousel.tsx\n\nvar Carousel = react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(\n  (rawProps, ref) => {\n    const props = rawProps;\n    const {\n      adaptiveHeight,\n      adaptiveHeightAnimation,\n      afterSlide,\n      animation,\n      autoplay,\n      autoplayInterval,\n      autoplayReverse,\n      beforeSlide,\n      cellAlign: propsCellAlign,\n      cellSpacing,\n      children,\n      className,\n      disableAnimation,\n      dragging: desktopDraggingEnabled,\n      dragThreshold: propsDragThreshold,\n      enableKeyboardControls,\n      frameAriaLabel,\n      keyCodeConfig,\n      onDrag,\n      onDragEnd,\n      onDragStart,\n      onUserNavigation,\n      pauseOnHover,\n      renderAnnounceSlideMessage,\n      scrollMode: propsScrollMode,\n      slideIndex,\n      slidesToScroll: propsSlidesToScroll,\n      slidesToShow: propsSlidesToShow,\n      slideWidth,\n      speed,\n      style,\n      swiping: mobileDraggingEnabled,\n      wrapAround,\n      zoomScale\n    } = props;\n    const filteredSlides = react__WEBPACK_IMPORTED_MODULE_0__.Children.toArray(children).filter(Boolean);\n    const slideCount = filteredSlides.length;\n    const cellAlign = slideWidth || propsSlidesToScroll === \"auto\" ? \"left\" : propsCellAlign;\n    const scrollMode = propsSlidesToScroll === \"auto\" ? \"remainder\" /* remainder */ : propsScrollMode;\n    const [slideIOEntries, setSlideIOEntries] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\n      /* @__PURE__ */ new Map()\n    );\n    const visibleCount = Array.from(slideIOEntries).filter(\n      ([, visible]) => visible\n    ).length;\n    const [constantVisibleCount, setConstantVisibleCount] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(visibleCount);\n    const slidesToShow = slideWidth ? constantVisibleCount : propsSlidesToShow;\n    const slidesToScroll = animation === \"fade\" ? slidesToShow : propsSlidesToScroll === \"auto\" ? Math.max(constantVisibleCount, 1) : propsSlidesToScroll;\n    const [currentSlide, setCurrentSlide] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\n      () => getDefaultSlideIndex(\n        slideIndex,\n        slideCount,\n        slidesToShow,\n        slidesToScroll,\n        cellAlign,\n        autoplayReverse,\n        scrollMode\n      )\n    );\n    const [pause, setPause] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [isDragging, setIsDragging] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [dragDistance, setDragDistance] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0);\n    const [animationDistance, setAnimationDistance] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0);\n    const [isAnimating, setIsAnimating] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const updateSlideIOEntry = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(\n      (id, isFullyVisible) => {\n        if (!!slideIOEntries.get(id) === isFullyVisible)\n          return;\n        setSlideIOEntries((prev) => {\n          const newMap = new Map(prev);\n          newMap.set(id, isFullyVisible);\n          return newMap;\n        });\n      },\n      [slideIOEntries]\n    );\n    const prevDragged = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n      if (isDragging)\n        prevDragged.current = true;\n      if (!(isDragging || isAnimating)) {\n        if (!prevDragged.current)\n          setConstantVisibleCount(visibleCount);\n        prevDragged.current = false;\n      }\n    }, [isAnimating, isDragging, visibleCount]);\n    const prevXPosition = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const preDragOffset = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(0);\n    const sliderListRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const defaultCarouselRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const autoplayTimeout = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\n    const autoplayLastTriggeredRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const isMounted = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(true);\n    const setSliderListRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((node) => {\n      if (node) {\n        node.querySelectorAll(\".slider-list img\").forEach((el) => el.setAttribute(\"draggable\", \"false\"));\n      }\n      sliderListRef.current = node;\n    }, []);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n      isMounted.current = true;\n      return () => {\n        isMounted.current = false;\n      };\n    }, []);\n    const forwardedRef = useForwardRef(ref);\n    const carouselRef = forwardedRef || defaultCarouselRef;\n    const goToSlide = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(\n      (targetSlideUnbounded) => {\n        if (!sliderListRef.current || !carouselRef.current)\n          return;\n        const targetSlideBounded = getBoundedIndex(\n          targetSlideUnbounded,\n          slideCount\n        );\n        const slideChanged = targetSlideUnbounded !== currentSlide;\n        slideChanged && beforeSlide(currentSlide, targetSlideBounded);\n        const currentOffset = sliderListRef.current.getBoundingClientRect().left - carouselRef.current.getBoundingClientRect().left;\n        const sliderWidth = sliderListRef.current.offsetWidth;\n        let targetOffset = getPercentOffsetForSlide(\n          targetSlideBounded,\n          slideCount,\n          slidesToShow,\n          cellAlign,\n          wrapAround\n        ) / 100 * sliderWidth;\n        if (wrapAround) {\n          const slideSetWidth = sliderWidth / 3;\n          if (targetSlideUnbounded < 0) {\n            targetOffset += slideSetWidth;\n          }\n          if (targetSlideUnbounded >= slideCount) {\n            targetOffset -= slideSetWidth;\n          }\n        }\n        setAnimationDistance(targetOffset - currentOffset);\n        if (slideChanged) {\n          setCurrentSlide(targetSlideBounded);\n          const msToEndOfAnimation = !disableAnimation ? speed || 500 : 40;\n          setTimeout(() => {\n            if (!isMounted.current)\n              return;\n            afterSlide(targetSlideBounded);\n          }, msToEndOfAnimation);\n        }\n      },\n      [\n        afterSlide,\n        beforeSlide,\n        carouselRef,\n        cellAlign,\n        currentSlide,\n        disableAnimation,\n        speed,\n        slideCount,\n        slidesToShow,\n        wrapAround\n      ]\n    );\n    const nextSlide = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {\n      const nextSlideIndex = getNextMoveIndex(\n        scrollMode,\n        wrapAround,\n        currentSlide,\n        slideCount,\n        slidesToScroll,\n        slidesToShow,\n        cellAlign\n      );\n      if (currentSlide !== nextSlideIndex) {\n        goToSlide(nextSlideIndex);\n      }\n    }, [\n      cellAlign,\n      currentSlide,\n      goToSlide,\n      slidesToScroll,\n      scrollMode,\n      slideCount,\n      slidesToShow,\n      wrapAround\n    ]);\n    const prevSlide = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {\n      const prevSlideIndex = getPrevMoveIndex(\n        scrollMode,\n        wrapAround,\n        currentSlide,\n        slidesToScroll,\n        slidesToShow,\n        cellAlign\n      );\n      if (currentSlide !== prevSlideIndex) {\n        goToSlide(prevSlideIndex);\n      }\n    }, [\n      cellAlign,\n      currentSlide,\n      goToSlide,\n      slidesToScroll,\n      scrollMode,\n      slidesToShow,\n      wrapAround\n    ]);\n    const prevMovedToSlideIndex = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(slideIndex);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n      if (slideIndex !== void 0 && slideIndex !== prevMovedToSlideIndex.current && !autoplayReverse) {\n        goToSlide(slideIndex);\n        prevMovedToSlideIndex.current = slideIndex;\n      }\n    }, [slideIndex, autoplayReverse, goToSlide]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n      let pauseStarted = null;\n      if (pause) {\n        pauseStarted = Date.now();\n      }\n      return () => {\n        if (pauseStarted !== null && autoplayLastTriggeredRef.current !== null) {\n          autoplayLastTriggeredRef.current += Date.now() - pauseStarted;\n        }\n      };\n    }, [pause]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n      if (autoplay && !pause) {\n        const adjustedTimeoutMs = autoplayLastTriggeredRef.current !== null ? autoplayInterval - (Date.now() - autoplayLastTriggeredRef.current) : autoplayInterval;\n        autoplayTimeout.current = setTimeout(() => {\n          autoplayLastTriggeredRef.current = Date.now();\n          if (autoplayReverse) {\n            prevSlide();\n          } else {\n            nextSlide();\n          }\n        }, adjustedTimeoutMs);\n      }\n      if (autoplay && pause) {\n        clearTimeout(autoplayTimeout.current);\n      }\n      return () => {\n        clearTimeout(autoplayTimeout.current);\n      };\n    }, [\n      pause,\n      autoplay,\n      autoplayInterval,\n      autoplayReverse,\n      prevSlide,\n      nextSlide\n    ]);\n    const onKeyDown = (event) => {\n      let keyCommand = null;\n      Object.keys(keyCodeConfig).forEach(\n        (command) => {\n          var _a;\n          if ((_a = keyCodeConfig[command]) == null ? void 0 : _a.includes(event.keyCode)) {\n            keyCommand = command;\n          }\n        }\n      );\n      if (keyCommand === null)\n        return;\n      event.preventDefault();\n      event.stopPropagation();\n      switch (keyCommand) {\n        case \"nextSlide\":\n          onUserNavigation(event);\n          nextSlide();\n          break;\n        case \"previousSlide\":\n          onUserNavigation(event);\n          prevSlide();\n          break;\n        case \"firstSlide\":\n        case \"lastSlide\": {\n          onUserNavigation(event);\n          const dotIndices = getDotIndexes(\n            slideCount,\n            slidesToScroll,\n            scrollMode,\n            slidesToShow,\n            wrapAround,\n            cellAlign\n          );\n          if (keyCommand === \"firstSlide\") {\n            goToSlide(dotIndices[0]);\n          } else {\n            goToSlide(dotIndices[dotIndices.length - 1]);\n          }\n          break;\n        }\n        case \"pause\":\n          setPause((p) => !p);\n          break;\n      }\n    };\n    const dragPositions = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)([]);\n    const handleDragEnd = (e) => {\n      if (!isDragging || !carouselRef.current)\n        return;\n      setIsDragging(false);\n      let distanceFromInertia = 0;\n      if (dragPositions.current.length > 1) {\n        const startMove = dragPositions.current[0];\n        const endMove = dragPositions.current[dragPositions.current.length - 1];\n        const timeOffset = endMove.time - startMove.time;\n        const goodInertiaFeelConstant = 9;\n        const goodFrictionFeelConstant = 0.92;\n        const initialVelocity = goodInertiaFeelConstant * Math.abs((endMove.pos - startMove.pos) / timeOffset);\n        let velocity = initialVelocity;\n        while (Math.abs(velocity) > 1) {\n          distanceFromInertia += velocity;\n          velocity *= goodFrictionFeelConstant;\n        }\n      }\n      dragPositions.current = [];\n      const adjustedDragDistance = Math.abs(dragDistance) + Math.abs(distanceFromInertia);\n      onDragEnd(e);\n      prevXPosition.current = null;\n      setDragDistance(0);\n      const oneScrollWidth = carouselRef.current.offsetWidth * Math.min(1, slidesToScroll / slidesToShow);\n      const dragThreshold = oneScrollWidth * propsDragThreshold;\n      if (adjustedDragDistance < dragThreshold) {\n        goToSlide(currentSlide);\n        return;\n      }\n      const canMaintainVisualContinuity = slidesToShow >= 2 * slidesToScroll;\n      const timesToMove = canMaintainVisualContinuity ? 1 + Math.floor((adjustedDragDistance - dragThreshold) / oneScrollWidth) : 1;\n      let nextSlideIndex = currentSlide;\n      for (let index = 0; index < timesToMove; index += 1) {\n        if (dragDistance > 0) {\n          nextSlideIndex = getNextMoveIndex(\n            scrollMode,\n            wrapAround,\n            nextSlideIndex,\n            slideCount,\n            slidesToScroll,\n            slidesToShow,\n            cellAlign\n          );\n        } else {\n          nextSlideIndex = getPrevMoveIndex(\n            scrollMode,\n            wrapAround,\n            nextSlideIndex,\n            slidesToScroll,\n            slidesToShow,\n            cellAlign\n          );\n        }\n      }\n      if (nextSlideIndex !== currentSlide) {\n        onUserNavigation(e);\n      }\n      goToSlide(nextSlideIndex);\n    };\n    const onTouchStart = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(\n      (e) => {\n        if (!mobileDraggingEnabled || !sliderListRef.current || !carouselRef.current) {\n          return;\n        }\n        setIsDragging(true);\n        preDragOffset.current = sliderListRef.current.getBoundingClientRect().left - carouselRef.current.getBoundingClientRect().left;\n        onDragStart(e);\n      },\n      [carouselRef, onDragStart, mobileDraggingEnabled]\n    );\n    const handlePointerMove = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(\n      (xPosition) => {\n        if (!isDragging)\n          return;\n        const isFirstMove = prevXPosition.current === null;\n        const delta = prevXPosition.current !== null ? xPosition - prevXPosition.current : 0;\n        const nextDragDistance = dragDistance + delta;\n        const now = Date.now();\n        while (dragPositions.current.length > 0) {\n          if (now - dragPositions.current[0].time <= 100) {\n            break;\n          }\n          dragPositions.current.shift();\n        }\n        dragPositions.current.push({ pos: nextDragDistance, time: now });\n        if (!isFirstMove) {\n          setDragDistance(nextDragDistance);\n        }\n        prevXPosition.current = xPosition;\n      },\n      [isDragging, dragDistance]\n    );\n    const onTouchMove = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(\n      (e) => {\n        if (!isDragging || !carouselRef.current)\n          return;\n        onDragStart(e);\n        const moveValue = carouselRef.current.offsetWidth - e.touches[0].pageX;\n        handlePointerMove(moveValue);\n      },\n      [isDragging, carouselRef, handlePointerMove, onDragStart]\n    );\n    const onMouseDown = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(\n      (e) => {\n        if (!desktopDraggingEnabled || !sliderListRef.current || !carouselRef.current)\n          return;\n        setIsDragging(true);\n        preDragOffset.current = sliderListRef.current.getBoundingClientRect().left - carouselRef.current.getBoundingClientRect().left;\n        onDragStart(e);\n      },\n      [carouselRef, desktopDraggingEnabled, onDragStart]\n    );\n    const onMouseMove = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(\n      (e) => {\n        if (!isDragging || !carouselRef.current)\n          return;\n        onDrag(e);\n        const offsetX = e.clientX - carouselRef.current.getBoundingClientRect().left;\n        const moveValue = carouselRef.current.offsetWidth - offsetX;\n        handlePointerMove(moveValue);\n      },\n      [carouselRef, isDragging, handlePointerMove, onDrag]\n    );\n    const onMouseUp = (e) => {\n      e.preventDefault();\n      handleDragEnd(e);\n    };\n    const onMouseEnter = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {\n      if (pauseOnHover) {\n        setPause(true);\n      }\n    }, [pauseOnHover]);\n    const onMouseLeave = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {\n      if (pauseOnHover) {\n        setPause(false);\n      }\n    }, [pauseOnHover]);\n    const {\n      frameHeight,\n      handleVisibleSlideHeightChange,\n      initializedAdaptiveHeight\n    } = useFrameHeight(adaptiveHeight, slidesToShow, slideCount);\n    const renderSlides = (typeOfSlide) => {\n      const slides = filteredSlides.map((child, index) => {\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n          slide_default,\n          {\n            id: `${typeOfSlide}-${index}`,\n            count: slideCount,\n            index,\n            isCurrentSlide: currentSlide === index,\n            typeOfSlide,\n            wrapAround,\n            cellSpacing,\n            animation,\n            speed,\n            zoomScale,\n            onVisibleSlideHeightChange: handleVisibleSlideHeightChange,\n            slideWidth,\n            updateIOEntry: updateSlideIOEntry,\n            adaptiveHeight,\n            initializedAdaptiveHeight,\n            carouselRef,\n            children: child\n          },\n          `${typeOfSlide}-${index}`\n        );\n      });\n      return slides;\n    };\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\n      \"div\",\n      {\n        className: \"slider-container\",\n        style: {\n          position: \"relative\"\n        },\n        onMouseEnter,\n        onMouseLeave,\n        children: [\n          /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n            announce_slide_default,\n            {\n              ariaLive: autoplay && !pause ? \"off\" : \"polite\",\n              message: renderAnnounceSlideMessage({\n                currentSlide,\n                count: slideCount\n              })\n            }\n          ),\n          controls_default(\n            props,\n            slideCount,\n            currentSlide,\n            goToSlide,\n            nextSlide,\n            prevSlide,\n            slidesToScroll\n          ),\n          /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n            \"div\",\n            {\n              className: [\"slider-frame\", className || \"\"].join(\" \").trim(),\n              style: __spreadValues({\n                overflow: \"hidden\",\n                width: \"100%\",\n                position: \"relative\",\n                outline: \"none\",\n                touchAction: \"pan-y\",\n                height: frameHeight,\n                transition: adaptiveHeightAnimation ? \"height 300ms ease-in-out\" : void 0,\n                willChange: \"height\",\n                userSelect: \"none\"\n              }, style),\n              \"aria-label\": frameAriaLabel,\n              role: \"region\",\n              tabIndex: enableKeyboardControls ? 0 : -1,\n              onKeyDown: enableKeyboardControls ? onKeyDown : void 0,\n              ref: carouselRef,\n              onMouseUp,\n              onMouseDown,\n              onMouseMove,\n              onMouseLeave: onMouseUp,\n              onTouchStart,\n              onTouchEnd: handleDragEnd,\n              onTouchMove,\n              children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\n                SliderList,\n                {\n                  animationDistance,\n                  cellAlign,\n                  currentSlide,\n                  disableEdgeSwiping: props.disableEdgeSwiping,\n                  draggedOffset: preDragOffset.current - dragDistance,\n                  disableAnimation,\n                  easing: props.easing,\n                  edgeEasing: props.edgeEasing,\n                  isDragging,\n                  ref: setSliderListRef,\n                  scrollMode,\n                  animation,\n                  slideCount,\n                  slidesToScroll,\n                  slidesToShow,\n                  speed,\n                  slideWidth,\n                  wrapAround,\n                  setIsAnimating,\n                  children: [\n                    wrapAround ? renderSlides(\"prev-cloned\") : null,\n                    renderSlides(),\n                    wrapAround ? renderSlides(\"next-cloned\") : null\n                  ]\n                }\n              )\n            }\n          )\n        ]\n      }\n    );\n  }\n);\nCarousel.defaultProps = default_carousel_props_default;\nCarousel.displayName = \"Carousel\";\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/nuka-carousel/dist/index.mjs\n"));

/***/ })

});